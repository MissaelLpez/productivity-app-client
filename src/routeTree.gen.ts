/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const StatsLazyImport = createFileRoute('/stats')()
const CompletedLazyImport = createFileRoute('/completed')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const StatsLazyRoute = StatsLazyImport.update({
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/stats.lazy').then((d) => d.Route))

const CompletedLazyRoute = CompletedLazyImport.update({
  path: '/completed',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/completed.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/completed': {
      id: '/completed'
      path: '/completed'
      fullPath: '/completed'
      preLoaderRoute: typeof CompletedLazyImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/completed': typeof CompletedLazyRoute
  '/stats': typeof StatsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/completed': typeof CompletedLazyRoute
  '/stats': typeof StatsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/completed': typeof CompletedLazyRoute
  '/stats': typeof StatsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/completed' | '/stats'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/completed' | '/stats'
  id: '__root__' | '/' | '/completed' | '/stats'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CompletedLazyRoute: typeof CompletedLazyRoute
  StatsLazyRoute: typeof StatsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CompletedLazyRoute: CompletedLazyRoute,
  StatsLazyRoute: StatsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/completed",
        "/stats"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/completed": {
      "filePath": "completed.lazy.tsx"
    },
    "/stats": {
      "filePath": "stats.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
